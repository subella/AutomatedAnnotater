classdef FullGridCalibrationTargetHandler < BaseCalibrationTargetHandler
    properties
        squareSize;
        validIds;
        imagePointsArray;
    end

    methods

        function obj = FullGridCalibrationTargetHandler(statusHandler, ...
                                                        rosbagParser, ...
                                                        squareSize)

            % TODO: don't hardcode board size.
            imagePoints = NaN(8*13, 2, rosbagParser.numImages);
            validIds = nan;
            for k=100:150%rosbagParser.numImages
                [rgbImage, ~] = rosbagParser.parseRGBDImage(k);
                [singleImagePoints, boardSize] = detectCheckerboardPoints(rgbImage);

                if all(all(boardSize == [9,14])) && sum(isnan(singleImagePoints(:))) == 0
                    disp("adding")
                    imagePoints(:, :, k) = singleImagePoints;
                    if isnan(validIds)
                        validIds = [k];
                    else
                        validIds = [validIds k];
                    end
                end         
            end
             worldPoints = generateCheckerboardPoints([9,14], squareSize);
             intrinsics = estimateCameraParameters(imagePoints(:,:,validIds), worldPoints, ...
                 'NumRadialDistortionCoefficients', 3, ...
                 'EstimateTangentialDistortion', true);
             disp(intrinsics.MeanReprojectionError);
             obj@BaseCalibrationTargetHandler(statusHandler, intrinsics);
             
             obj.imagePointsArray = imagePoints;
             obj.validIds = validIds;
             obj.worldPoints = worldPoints;
             
        end

        function updateExtrinsics(obj, id)
            intrinsicsId = find(obj.validIds==id);
            if isempty(intrinsicsId)
                obj.R = nan;
                obj.t = nan;
                obj.gridWrtCam = nan;
                obj.isValid = false;
            else
                obj.R = obj.intrinsics.RotationMatrices(:,:,intrinsicsId);
                obj.t = obj.intrinsics.TranslationVectors(intrinsicsId, :);
                obj.gridWrtCam = makeHomo(obj.R', obj.t);
                obj.isValid = true;
                obj.origImagePoints = obj.imagePointsArray(:,:,id);
                obj.reprojectedPoints = obj.intrinsics.ReprojectedPoints(:,:,intrinsicsId);
            end


%             [obj.origImagePoints, boardSize] = detectCheckerboardPoints(rgbImage, 'PartialDetections', false);
% 
%             undistortedImage = undistortImage(rgbImage, obj.intrinsics);
% 
%             [obj.imagePoints, boardSize] = detectCheckerboardPoints(undistortedImage, 'PartialDetections', false); % 0.4
% %             disp(obj.imagePoints)
%             % Filter out misdetections
%             if sum(isnan(obj.imagePoints(:))) || ...
%                boardSize(1) ~= 9 || ...
%                boardSize(2) ~= 14
%                 obj.R = nan;
%                 obj.t = nan;
%                 obj.gridWrtCam = nan;
%                 obj.isValid = false;
%                 return;
%             end

%             obj.worldPoints = generateCheckerboardPoints(boardSize, obj.squareSize);
%             [obj.R, obj.t] = extrinsics(obj.imagePoints, obj.worldPoints, obj.intrinsics);
%             worldPoints = [obj.worldPoints zeros((size(obj.worldPoints, 1)), 1)];
%             reprojectedPoints = worldToImage(obj.intrinsics, obj.R, obj.t, worldPoints, 'ApplyDistortion',true);
%             if size(obj.origImagePoints, 1) ~= size(reprojectedPoints, 1)
%                 obj.R = nan;
%                 obj.t = nan;
%                 obj.gridWrtCam = nan;
%                 obj.isValid = false;
%                 return;
%             end
%             reprojectionError = mean(sqrt(sum((obj.origImagePoints - reprojectedPoints).^2,2)));
%             disp(reprojectionError)
%             if reprojectionError > 0.75
%                 obj.R = nan;
%                 obj.t = nan;
%                 obj.gridWrtCam = nan;
%                 obj.isValid = false;
%                 return;
%             end
% 
%             obj.gridWrtCam = makeHomo(obj.R', obj.t);
%             obj.isValid = true;
        end

    end


end